1. Задача - пълнене на акаунти

При създаване на базата данни наново да се наливат определеони акаунти, които да са познати и да се брави лесно с тях.

Пример id 1 да е долари, ид 2 да е BGN, id 3 da e евро и да имат пари за да можем да работим с тях.

spring.jpa.hibernate.ddl-auto=create - създава таблиците наново
spring.jpa.hibernate.ddl-auto=validate - проверява дали таблиците съответстват

Hint: провери в интернет как се прави

2. Задача - добавяне на модул Транзакции

Искаме всяко движение на пари да се записва в базата данни.

По същия модел, които досега ползваме - Controller, Service, Repository, Entity да се добавят транзакции.

В базата да имат следните полета:

 1. Id
 2. Date - кога е направена транзакцията
 3. Type - тип транзакция
 4. Status - дали е успешна или не
 5. валута - измисли име за начална валута
 6. стойност -измисли име за начална стойност
 7. Rate - курс (ако е exchange)
 8. валута - измисли име за крайна валута
 9. стойност -измисли име за крайна стойност
10. accountId - начален акаунт към които принадлежи транзакцията (няма да добавяме крайния акаунт при exchange засега)

Тъй като ще имаме модул транзакции, да се извади всичко от AccountController и да се премести в TransactionController.
Искаме всеки клас да прави само това за което отговаря. (Разделяне на отговорности)

hint - pogledni "date" kolona na tablicata v internet kak se pravi;
accountID da e String, posle shte govorim za relation-i

3. Zadacha - da se napravqt Get i Post methodi za Tranzakciite

4. Handle exceptions - to be client friendly ( na postman-a da se pokazvat greshkite po-hubavo).

    - add validations to parameters.

    ✓    how to handle exceptions in Spring Boot. (pochvame ot kriv deposit). (how to change the format of exception in spring boot)
         how to add validations to parameters in Spring Boot





5. Overall tasks
    ✓ - clean all code from imports, whitespaces, lines that are not useful // tva vkluchva li metodi, koito ne se polzvat
    (a.k.a get/set metodi, nqkoi konstruktori)

    ✓ - izchisti vsicki ostaveni komentari v koda


    - vij kakvo pravi @RestController("/accounts") vmesto samo @RestController (pesti pisane na url ako imash mn endpointi)

    - razgledai kakvo prawi project lombok i zameni getterite i setterite v cyalata aplikacita
     ✓    - https://www.baeldung.com/intro-to-project-lombok
     ✓    - https://projectlombok.org/features/

     ✓  GitBranching / GitIntroduction.

     ✓  Razgledai Exchange Service promenite moq kod.


6. Task to check with Yavor:
exchangeCurrency metoda v TransactionService - pravi withdrawal, no ako sled tova ima greshka ne go vrushta

